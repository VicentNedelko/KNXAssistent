@page "/HS/Index"
@using KNXManager.HS
@using DAL.Models

@inject IHsService hsService

<h3>HS4 Settings</h3>

<br />
<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is2" TextAlignment="TextAlignment.End">HOST IP</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is4">
        <TextEdit Placeholder="IP address" @bind-Text="hostIp"></TextEdit>
    </FieldBody>
</Field>
<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is2" TextAlignment="TextAlignment.End">LOGIN</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is4">
        <TextEdit Placeholder="Login" @bind-Text="login" Role="TextRole.Text" />
    </FieldBody>
</Field>
<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is2" TextAlignment="TextAlignment.End">PASSWORD</FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is4">
        <TextEdit Placeholder="Password" @bind-Text="pass" Role="TextRole.Password"></TextEdit>
    </FieldBody>
</Field>
<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.Is2" Visibility="Visibility.None"></FieldLabel>
    <FieldBody ColumnSize="ColumnSize.Is4">
        <MatButton Outlined="true" OnClick="OnHsSettingsOkClick">Set</MatButton>
    </FieldBody>
</Field>
<MatDivider></MatDivider><br />
<div>@hsService.Error</div>
@if(logActionsArray is not null)
{
    <Table FixedHeader="true" FixedHeaderTableHeight=500px>
        <TableHeader>
            <Blazorise.TableRow>
                <TableHeaderCell>Num</TableHeaderCell>
                <TableHeaderCell>Time Stamp</TableHeaderCell>
                <TableHeaderCell>User</TableHeaderCell>
                <TableHeaderCell>IP</TableHeaderCell>
                <TableHeaderCell>Auth</TableHeaderCell>
                <TableHeaderCell>Loc</TableHeaderCell>
                <TableHeaderCell>Client</TableHeaderCell>
                <TableHeaderCell>List Type</TableHeaderCell>
            </Blazorise.TableRow>
        </TableHeader>
        <TableBody>
            @foreach(var l in logActionsArray)
            {
                <Blazorise.TableRow>
                    <TableRowCell>@(logActionsArray.IndexOf(l) + 1)</TableRowCell>
                    <TableRowCell>@l.TimeStamp</TableRowCell>
                    <TableRowCell>@l.UserName</TableRowCell>
                    <TableRowCell>@l.IP</TableRowCell>
                    <TableRowCell>@l.Auth</TableRowCell>
                    <TableRowCell>@l.Loc</TableRowCell>
                    <TableRowCell>@l.Client</TableRowCell>
                    <TableRowCell>@l.ListType</TableRowCell>
                </Blazorise.TableRow>
            }
        </TableBody>
    </Table>
}
<MatButton OnClick="OnLoadClick" Outlined="true" Disabled="@loadDsbl">LOAD</MatButton>


@code {
    string hostIp;
    string login;
    string pass;
    string loginList;
    string loginListContent;
    bool loadDsbl;
    LogInfo[] logActionsArray;

    void OnHsSettingsOkClick()
    {
        hsService.HostIp = hostIp;
        hsService.Login = login;
        hsService.Pass = pass;
        if (String.IsNullOrEmpty(hostIp) || String.IsNullOrEmpty(login) || String.IsNullOrEmpty(pass))
        {
            loadDsbl = true;
        }
        else
        {
            loadDsbl = false;
        }
        StateHasChanged();
    }

    async Task OnLoadClick()
    {
        loginList = await hsService.GetLoginActionsAsync();
        StateHasChanged();
        var parsedLogins = hsService.GetParsedLoginActions(loginList);
        logActionsArray = hsService.GetLogValues(parsedLogins);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        loginList = string.Empty;
        if (String.IsNullOrEmpty(hostIp) || String.IsNullOrEmpty(login) || String.IsNullOrEmpty(pass))
        {
            loadDsbl = true;
        }
        else
        {
            loadDsbl = false;
        }
    }
}
