@page "/Bot/botMonitor";
@using DAL.Models
@using KNXManager.BusConnection
@using KNXManager.MonitorService

@inject IBusCommunicator busCommunicator
@inject IMonitor monitor

<h4>Monitor Logger</h4>
<br />
<MatDivider></MatDivider>
<Div>
    <p>Active Interface</p>
    <p>
        <MatStringField ReadOnly="true" Value="@busCommunicator.ActiveInt.Ip" Label="Interface IP"></MatStringField>
    </p>
    <p>
        <MatStringField ReadOnly="true" Value="@busCommunicator.ActiveInt.Name" Label="Interface NAME"></MatStringField>
    </p>
    <p>
        <MatStringField ReadOnly="true" Value="@busCommunicator.ActiveInt.State" Label="KNX BUS STATE"></MatStringField>
    </p>
</Div>
<MatDivider></MatDivider>


@if (!String.IsNullOrEmpty(busCommunicator.ActiveInt.Ip))
{
    @if (monitor.gaValues.Count() != 0)
    {


        <Table FixedHeader="true" FixedHeaderTableHeight="300px">
            <TableHeader>
                <Blazorise.TableRow>
                    <TableHeaderCell>Num</TableHeaderCell>
                    <TableHeaderCell>Description</TableHeaderCell>
                    <TableHeaderCell>Address</TableHeaderCell>
                    <TableHeaderCell>Value</TableHeaderCell>
                    <TableHeaderCell>Unit</TableHeaderCell>
                    <TableHeaderCell>Notification</TableHeaderCell>
                </Blazorise.TableRow>
            </TableHeader>
            <TableBody>
                @foreach (var v in monitor.gaValues)
                {
                    <Blazorise.TableRow>
                        <TableRowHeader>@(monitor.gaValues.IndexOf(v) + 1)</TableRowHeader>
                        <TableRowCell>@v.Description</TableRowCell>
                        <TableRowCell>@v.Address</TableRowCell>
                        <TableRowCell>@v.Value</TableRowCell>
                        <TableRowCell>@v.Unit</TableRowCell>
                        <TableRowCell>@v.Notification</TableRowCell>
                    </Blazorise.TableRow>
                }
            </TableBody>
        </Table>
    }
    else
    {
        <Alert Color="Color.Info" Visible="true">
            <AlertMessage>KNX Bus : </AlertMessage>
            <AlertDescription>No Data loaded yet.</AlertDescription>
        </Alert>
    }
    <MatButton Raised="true" OnClick="@OnStartClick" Disabled="startBtnDsbl">Start</MatButton>
    <MatButton Outlined="true" OnClick="@OnStopClick" Disabled="stopBtnDsbl">Stop</MatButton>
}
else
{
    <Alert Color="Color.Warning" Visible>
        <AlertMessage>Warning!</AlertMessage>
        <AlertDescription>To establish KNX connection select active interface.</AlertDescription>
    </Alert>
}


@code {

    [Inject] INotificationService NotificationService { get; set; }
    bool startBtnDsbl = false;
    bool stopBtnDsbl = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (busCommunicator.handlerGvrNumber > 0)
        {
            startBtnDsbl = true;
            stopBtnDsbl = false;
        }
        else
        {
            startBtnDsbl = false;
            stopBtnDsbl = true;
        }
    }


    void OnStartClick()
    {
        monitor.StartMonitor();
        monitor.OnGaReceived += OnNotify;
        startBtnDsbl = true;
        stopBtnDsbl = false;
        StateHasChanged();
    }

    void OnStopClick()
    {
        monitor.StopMonitor();
        startBtnDsbl = false;
        stopBtnDsbl = true;
        monitor.OnGaReceived -= OnNotify;
        StateHasChanged();
    }

    public async Task OnNotify()
    {
        await this.InvokeAsync(() => StateHasChanged());
        await ShowWarningNotification();
    }

    Task ShowWarningNotification()
    {
        return NotificationService.Warning("This is a simple notification message!", "Hello");
    }


}
